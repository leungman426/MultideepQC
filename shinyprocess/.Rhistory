#pheatmap(file1, cluster_cols = FALSE, color = col, breaks = breaks, border_color = NA,
#         legend_labels = lg_labels, legend_breaks = lg_breaks, fontsize_col = 11,
#         fontsize_row = 5, cellheight = 5, main = title, fontsize = 20)
ht = Heatmap(file1, cluster_columns = FALSE, col = colorRamp2(c(0, 0.5, 1), c('blue', 'yellow', 'red')),
column_title = paste0(title, '  (tumor groups: red; control groups: blue)'),
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
heatmap_legend_param = list(title= "methylation ratio", legend_width = unit(10, "cm"),
title_gp = gpar(fontsize = 8), legend_direction = "horizontal",
title_position = "lefttop"),
row_names_gp = gpar(fontsize = 10, col = groupping), column_names_gp = gpar(fontsize = 7))
draw(ht, heatmap_legend_side = "bottom")
}
heatmap_fun(file, title)
heatmap_fun <- function(file, title){
rownames(file) <- file$pos
file <- file[,-1]
file1 <- t(file)[,1:101]
group <- read.csv2('/Users/wenliang/Documents/thesis/WGBS/results/groups.csv', stringsAsFactors = FALSE)
group$tumor <- sub('-', '.', group$tumor)
group$control <- sub('-', '.', group$control)
groupping <- vector()
for (name in rownames(file1)){
if (name %in% group$tumor) {
groupping <- c(groupping, 'red')
}
if (name %in% group$control) {
groupping <- c(groupping, 'blue')
}
}
#col = colorRampPalette(c('blue', 'yellow', 'red'))(30)
#breaks = seq(from=0, to=1, length.out=31)
#lg_breaks <- c(0,0.2,0.4,0.6,0.8,1)
#lg_labels <- c('0', '20%', '40%', '60%', '80%', '100%')
#pheatmap(file1, cluster_cols = FALSE, color = col, breaks = breaks, border_color = NA,
#         legend_labels = lg_labels, legend_breaks = lg_breaks, fontsize_col = 11,
#         fontsize_row = 5, cellheight = 5, main = title, fontsize = 20)
ht = Heatmap(file1, cluster_columns = FALSE, col = colorRamp2(c(0, 0.5, 1), c('blue', 'yellow', 'red')),
column_title = paste0(title, '  (tumor groups: red; control groups: blue)'),
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
heatmap_legend_param = list(title= "methylation ratio", legend_width = unit(10, "cm"),
title_gp = gpar(fontsize = 8), legend_direction = "horizontal",
title_position = "lefttop"),
row_names_gp = gpar(fontsize = 6, col = groupping), column_names_gp = gpar(fontsize = 7))
draw(ht, heatmap_legend_side = "bottom")
}
heatmap_fun(file, title)
library(shiny); runApp('Desktop/draft1.R')
groupping <- vector()
for (name in rownames(file1)){
if (name %in% group$tumor) {
groupping <- c(groupping, 'red')
}
if (name %in% group$control) {
groupping <- c(groupping, 'blue')
}
}
#col = colorRampPalette(c('blue', 'yellow', 'red'))(30)
#breaks = seq(from=0, to=1, length.out=31)
#lg_breaks <- c(0,0.2,0.4,0.6,0.8,1)
#lg_labels <- c('0', '20%', '40%', '60%', '80%', '100%')
#pheatmap(file1, cluster_cols = FALSE, color = col, breaks = breaks, border_color = NA,
#         legend_labels = lg_labels, legend_breaks = lg_breaks, fontsize_col = 11,
#         fontsize_row = 5, cellheight = 5, main = title, fontsize = 20)
ht = Heatmap(file1, cluster_columns = FALSE, col = colorRamp2(c(0, 0.5, 1), c('blue', 'yellow', 'red')),
column_title = paste0(title, '  (tumor groups: red; control groups: blue)'),
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
heatmap_legend_param = list(title= "methylation level", legend_width = unit(10, "cm"),
title_gp = gpar(fontsize = 15), legend_direction = "horizontal",
title_position = "lefttop"),
row_names_gp = gpar(fontsize = 10, col = groupping), column_names_gp = gpar(fontsize = 10))
draw(ht, heatmap_legend_side = "bottom")
}
heatmap_fun <- function(file, title){
rownames(file) <- file$pos
file <- file[,-1]
file1 <- t(file)[,1:101]
group <- read.csv2('/Users/wenliang/Documents/thesis/WGBS/results/groups.csv', stringsAsFactors = FALSE)
group$tumor <- sub('-', '.', group$tumor)
group$control <- sub('-', '.', group$control)
groupping <- vector()
for (name in rownames(file1)){
if (name %in% group$tumor) {
groupping <- c(groupping, 'red')
}
if (name %in% group$control) {
groupping <- c(groupping, 'blue')
}
}
#col = colorRampPalette(c('blue', 'yellow', 'red'))(30)
#breaks = seq(from=0, to=1, length.out=31)
#lg_breaks <- c(0,0.2,0.4,0.6,0.8,1)
#lg_labels <- c('0', '20%', '40%', '60%', '80%', '100%')
#pheatmap(file1, cluster_cols = FALSE, color = col, breaks = breaks, border_color = NA,
#         legend_labels = lg_labels, legend_breaks = lg_breaks, fontsize_col = 11,
#         fontsize_row = 5, cellheight = 5, main = title, fontsize = 20)
ht = Heatmap(file1, cluster_columns = FALSE, col = colorRamp2(c(0, 0.5, 1), c('blue', 'yellow', 'red')),
column_title = paste0(title, '  (tumor groups: red; control groups: blue)'),
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
heatmap_legend_param = list(title= "methylation level", legend_width = unit(10, "cm"),
title_gp = gpar(fontsize = 8), legend_direction = "horizontal",
title_position = "lefttop"),
row_names_gp = gpar(fontsize = 6, col = groupping), column_names_gp = gpar(fontsize = 7))
draw(ht, heatmap_legend_side = "bottom")
}
heatmap_fun(file, title)
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
seq(0,0)
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
library(ggplot2)
library(ggdendro)
library(plotly)
m <- list(l = 50, r = 50, b = 100, t = 100, pad = 4)
# clustering
dendro_fun <- function(file, tle){
file <- file[,-1]
file <- data.frame(t(file))
file1 <- group_fun(file)
hc <- hclust(dist(file), "ave")
hcdata <- dendro_data(hc, type="rectangle")
p <- ggplot() +
geom_segment(data=segment(hcdata), aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=label(hcdata), aes(x=x, y=y, label=label, color = factor(file1[,'group'])),
nudge_y=1, size=2, fontface = 'bold') +
labs(title = tle, x = '', y = '') +
coord_flip() +
scale_y_reverse(expand=c(0.5, 0)) +
scale_color_discrete(name="groups") +
guides(fill = guide_legend(title = 'group', title.position = "left"))
p1 <- ggplotly(p) %>%
layout(autosize = F, width = 1000, height = 1000, margin = m)
return(p1)
}
file <- read.csv2('/Users/wenliang/Documents/thesis/WGBS/results/methylationcalling/shores/1_plus_shoresCG.csv')
title <- 'clustering'
dendro_fun(file, title)
file <- read.csv2('/Users/wenliang/Documents/thesis/WGBS/results/methylationcalling/shores/1_plus_islandsCG.csv')
file <- read.csv2('/Users/wenliang/Documents/thesis/WGBS/results/methylationcalling/islands/1_plus_islandsCG.csv')
dendro_fun(file, title)
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
title <- paste0('(', 1, ' chromosome)', ' CpG sites (CpG ',
'islands', ')', ' Methylation Level (',  'plus', ' strand)')
dendro_fun(file,title)
file <- read.csv2('/Users/wenliang/Documents/thesis/WGBS/results/methylationcalling/shores/1_plus_islandsCG.csv')
file <- read.csv2('/Users/wenliang/Documents/thesis/WGBS/results/methylationcalling/shores/1_plus_shoresCG.csv')
title <- paste0('(', 1, ' chromosome)', ' CpG sites (CpG ',
'shores', ')', ' Methylation Level (',  'plus', ' strand)')
dendro_fun(file, title)
m <- list(l = 50, r = 50, b = 100, t = 100, pad = 4)
# clustering
dendro_fun <- function(file, tle){
file <- file[,-1]
file <- data.frame(t(file))
file1 <- group_fun(file)
hc <- hclust(dist(file), "ave")
hcdata <- dendro_data(hc, type="rectangle")
p <- ggplot() +
geom_segment(data=segment(hcdata), aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=label(hcdata), aes(x=x, y=y, label=label, color = factor(file1[,'group'])),
nudge_y=1, size=2, fontface = 'bold') +
labs(title = tle, x = '', y = '') +
coord_flip() +
scale_y_reverse(expand=c(0.5, 0)) +
scale_color_discrete(name="groups") +
guides(fill = guide_legend(title = 'group', title.position = "left"))
#p1 <- ggplotly(p) %>%
#layout(autosize = F, width = 1000, height = 1000, margin = m)
return(p)
}
dendro_fun(file, title)
file <- read.csv2('/Users/wenliang/Documents/thesis/WGBS/results/methylationcalling/islands/1_plus_islandsCG.csv')
title <- paste0('(', 1, ' chromosome)', ' CpG sites (CpG ',
'islands', ')', ' Methylation Level (',  'plus', ' strand)')
dendro_fun(file, title)
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
m <- list(l = 50, r = 50, b = 120, t = 100, pad = 4)
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
library(ComplexHeatmap)
library(circlize)
heatmap_rna <- function(path, diffgene) {
file <- read.csv2(paste0(path, diffgene),
sep = ',', stringsAsFactors = FALSE)
file <- file[,-1][c(1:2000),]
file1 <- data.frame(apply(file[,-1], 2, as.numeric))
exp <- function(list){
list1 <- log10(list+1)
return(list1)
}
file1 <- data.frame(apply(file1, 2, exp))
rownames(file1) <- file[,'gene']
file2 <- t(file1)
a <- min(file1)
b <- max(file1)
# for 2000 genes
ht = Heatmap(file2, cluster_columns = FALSE,
col = colorRamp2(seq(a, b, by = (b-a)/4), c('blue',"green", "yellow", "red",'black')),
column_title = 'Expression Level (TMP) of the frist 2000 genes (x: 2000 genes; y: samples)',
show_column_names = FALSE,
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
heatmap_legend_param = list(title= 'Expression level (log10)', legend_width = unit(10, "cm"),
title_gp = gpar(fontsize = 15), legend_direction = "horizontal",
title_position = "lefttop"),
row_names_gp = gpar(fontsize = 10))
draw(ht, heatmap_legend_side = "bottom")
}
heatmap_rna('/Users/wenliang/Documents/thesis/RNASeq/results/expressionlevel/data', 'topgene')
heatmap_rna('/Users/wenliang/Documents/thesis/RNASeq/results/expressionlevel/data/', 'topgene.csv')
heatmap_rna('/Users/wenliang/Documents/thesis/RNASeq/results/expressionlevel/data/', 'topgene_exp.csv')
heatmap_rna('/Users/wenliang/Documents/thesis/RNASeq/results/expressionlevel/data/', 'midgene_exp.csv')
heatmap_rna('/Users/wenliang/Documents/thesis/RNASeq/results/expressionlevel/data/', 'bottomgene_exp.csv')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
runApp('Desktop/draft1.R')
library(shiny); runApp('Desktop/untitled folder/shinyprocess/draft1.R')
p2 <- style(p1, text = df2[,'samples'] , hoverinfo = "text")
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
file <- read.csv2('/Users/wenliang/Documents/thesis/RNASeq/results/expressionlevel/data/explevel_genelength.csv',
stringsAsFactors = F)
colnames(file1) <- gsub("^X", "", colnames(file1))
colnames(file1) <- c('samples', colnames(file1[,-1]))
df1 <- gather(file, key = 'GeneLength', value = 'ExpressionLevel', -samples)
df1[,'GeneLength'] <- as.numeric(df1[,'GeneLength'])
df1[,'ExpressionLevel'] <- as.numeric(df1[,'ExpressionLevel'])
genelen <- cut(df1$GeneLength, 30) #, dig.lab = 10)
df1$GeneLength <- genelen
a <- log10(df1[,'ExpressionLevel'])
df2 <- df1[!is.infinite(a),]
p <- ggplot(df2, aes(x = df2[,'GeneLength'], y = log2(df2[,'ExpressionLevel']))) +
geom_boxplot() +
labs(x = xlab, y = 'Expression Level(log2)', title = tle)
colnames(file) <- gsub("^X", "", colnames(file))
colnames(file) <- c('samples', colnames(file[,-1]))
df1 <- gather(file, key = 'GeneLength', value = 'ExpressionLevel', -samples)
df1[,'GeneLength'] <- as.numeric(df1[,'GeneLength'])
df1[,'ExpressionLevel'] <- as.numeric(df1[,'ExpressionLevel'])
genelen <- cut(df1$GeneLength, 30) #, dig.lab = 10)
df1$GeneLength <- genelen
a <- log10(df1[,'ExpressionLevel'])
df2 <- df1[!is.infinite(a),]
p <- ggplot(df2, aes(x = df2[,'GeneLength'], y = log2(df2[,'ExpressionLevel']))) +
geom_boxplot() +
labs(x = xlab, y = 'Expression Level(log2)', title = tle)
p <- ggplot(df2, aes(x = df2[,'GeneLength'], y = log2(df2[,'ExpressionLevel']))) +
geom_boxplot() +
labs(x = 'xlab', y = 'Expression Level(log2)', title = 'tle')
m <- list(l = 50, r = 50, b = 120, t = 100, pad = 4)
p1 <- ggplotly(p)
p2 <- style(p1, text = df2[,'samples'] , hoverinfo = "text") %>%
layout(autosize = F, width = 1000, height = 800, margin = m)
p2
library(shiny); runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
path <- '/Users/wenliang/Documents/thesis/RNASeq/results/expressionlevel/data/'
diffgene <- 'topgene_exp.csv'
library(ComplexHeatmap)
library(circlize)
heatmap_rna <- function(path, diffgene) {
file <- read.csv2(paste0(path, diffgene),
sep = ',', stringsAsFactors = FALSE)
file <- file[,-1][c(1:2000),]
file1 <- data.frame(apply(file[,-1], 2, as.numeric))
exp <- function(list){
list1 <- log10(list+1)
return(list1)
}
file1 <- data.frame(apply(file1, 2, exp))
rownames(file1) <- file[,'gene']
file2 <- t(file1)
a <- min(file1)
b <- max(file1)
# for 2000 genes
ht = Heatmap(file2, cluster_columns = FALSE,
col = colorRamp2(seq(a, b, by = (b-a)/4), c('blue',"green", "yellow", "red",'black')),
column_title = 'Expression Level (TPM) of the frist 2000 high expression genes',
show_column_names = FALSE,
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
heatmap_legend_param = list(title= 'Expression level (log10)', legend_width = unit(10, "cm"),
title_gp = gpar(fontsize = 15), legend_direction = "horizontal",
title_position = "lefttop"),
row_names_gp = gpar(fontsize = 10))
draw(ht, heatmap_legend_side = "bottom")
}
heatmap_rna(path, diffgene)
path <- '/Users/wenliang/Documents/thesis/RNASeq/results/expressionlevel/data/'
diffgene <- 'midgene_exp.csv'
heatmap_rna <- function(path, diffgene) {
file <- read.csv2(paste0(path, diffgene),
sep = ',', stringsAsFactors = FALSE)
file <- file[,-1][c(1:2000),]
file1 <- data.frame(apply(file[,-1], 2, as.numeric))
exp <- function(list){
list1 <- log10(list+1)
return(list1)
}
file1 <- data.frame(apply(file1, 2, exp))
rownames(file1) <- file[,'gene']
file2 <- t(file1)
a <- min(file1)
b <- max(file1)
# for 2000 genes
ht = Heatmap(file2, cluster_columns = FALSE,
col = colorRamp2(seq(a, b, by = (b-a)/4), c('blue',"green", "yellow", "red",'black')),
column_title = 'Expression Level (TPM) of the frist 2000 high expression genes',
show_column_names = FALSE,
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
heatmap_legend_param = list(title= 'Expression level (log10)', legend_width = unit(10, "cm"),
title_gp = gpar(fontsize = 15), legend_direction = "horizontal",
title_position = "lefttop"),
row_names_gp = gpar(fontsize = 10))
draw(ht, heatmap_legend_side = "bottom")
}
path <- '/Users/wenliang/Documents/thesis/RNASeq/results/expressionlevel/data/'
diffgene <- 'midgene_exp.csv'
heatmap_rna(path, diffgene)
heatmap_rna <- function(path, diffgene) {
file <- read.csv2(paste0(path, diffgene),
sep = ',', stringsAsFactors = FALSE)
file <- file[,-1][c(1:2000),]
file1 <- data.frame(apply(file[,-1], 2, as.numeric))
exp <- function(list){
list1 <- log10(list+1)
return(list1)
}
file1 <- data.frame(apply(file1, 2, exp))
rownames(file1) <- file[,'gene']
file2 <- t(file1)
a <- min(file1)
b <- max(file1)
# for 2000 genes
ht = Heatmap(file2, cluster_columns = FALSE,
col = colorRamp2(seq(a, b, by = (b-a)/4), c('blue',"green", "yellow", "red",'black')),
column_title = 'Expression Level (TPM) of the frist 2000 intermeidate expression genes',
show_column_names = FALSE,
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
heatmap_legend_param = list(title= 'Expression level (log10)', legend_width = unit(10, "cm"),
title_gp = gpar(fontsize = 15), legend_direction = "horizontal",
title_position = "lefttop"),
row_names_gp = gpar(fontsize = 10))
draw(ht, heatmap_legend_side = "bottom")
}
path <- '/Users/wenliang/Documents/thesis/RNASeq/results/expressionlevel/data/'
diffgene <- 'midgene_exp.csv'
heatmap_rna(path, diffgene)
heatmap_rna <- function(path, diffgene) {
file <- read.csv2(paste0(path, diffgene),
sep = ',', stringsAsFactors = FALSE)
file <- file[,-1][c(1:2000),]
file1 <- data.frame(apply(file[,-1], 2, as.numeric))
exp <- function(list){
list1 <- log10(list+1)
return(list1)
}
file1 <- data.frame(apply(file1, 2, exp))
rownames(file1) <- file[,'gene']
file2 <- t(file1)
a <- min(file1)
b <- max(file1)
# for 2000 genes
ht = Heatmap(file2, cluster_columns = FALSE,
col = colorRamp2(seq(a, b, by = (b-a)/4), c('blue',"green", "yellow", "red",'black')),
column_title = 'Expression Level (TPM) of the frist 2000 intermediate expression genes',
show_column_names = FALSE,
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
heatmap_legend_param = list(title= 'Expression level (log10)', legend_width = unit(10, "cm"),
title_gp = gpar(fontsize = 15), legend_direction = "horizontal",
title_position = "lefttop"),
row_names_gp = gpar(fontsize = 10))
draw(ht, heatmap_legend_side = "bottom")
}
path <- '/Users/wenliang/Documents/thesis/RNASeq/results/expressionlevel/data/'
diffgene <- 'midgene_exp.csv'
heatmap_rna(path, diffgene)
heatmap_rna <- function(path, diffgene) {
file <- read.csv2(paste0(path, diffgene),
sep = ',', stringsAsFactors = FALSE)
file <- file[,-1][c(1:2000),]
file1 <- data.frame(apply(file[,-1], 2, as.numeric))
exp <- function(list){
list1 <- log10(list+1)
return(list1)
}
file1 <- data.frame(apply(file1, 2, exp))
rownames(file1) <- file[,'gene']
file2 <- t(file1)
a <- min(file1)
b <- max(file1)
# for 2000 genes
ht = Heatmap(file2, cluster_columns = FALSE,
col = colorRamp2(seq(a, b, by = (b-a)/4), c('blue',"green", "yellow", "red",'black')),
column_title = 'Expression Level (TPM) of the frist 2000 low expression genes',
show_column_names = FALSE,
column_title_gp = gpar(fontsize = 16, fontface = "bold"),
heatmap_legend_param = list(title= 'Expression level (log10)', legend_width = unit(10, "cm"),
title_gp = gpar(fontsize = 15), legend_direction = "horizontal",
title_position = "lefttop"),
row_names_gp = gpar(fontsize = 10))
draw(ht, heatmap_legend_side = "bottom")
}
path <- '/Users/wenliang/Documents/thesis/RNASeq/results/expressionlevel/data/'
diffgene <- 'bottomgene_exp.csv'
heatmap_rna(path, diffgene)
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
graph_fun_methycov <- function(file, ylab, tle){
file1 <- gather(file, key = 'samples', value = 'counts', -pos)
file1$counts <- as.numeric(file1$counts)
p <- ggplot(data = file1, aes(x = log2(pos), y = counts,
group = samples)) +
geom_line() +
labs(x = 'Coverage (log2)', y = ylab, title = tle)
# +
# scale_x_continuous(breaks = c(seq(1,50), 100, 150, 200),
#labels = c(seq(1,50), 100, 150, 200))
#+
# scale_x_log10()
p1 <- p + theme(legend.position = "none")
p2 <- ggplotly(p1)
p2 <- style(p2, text = file1[,'samples'] , hoverinfo="text") %>%
layout(autosize = F, width = 1000, height = 800, margin = m)
return(p2)
}
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
runApp('Desktop/untitled folder/shinyprocess/draft1.R')
